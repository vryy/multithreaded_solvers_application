set(MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external_includes")
set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "")

#include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/SparseLib++/1.7/include )
#include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/SparseLib++/1.7/mv/include )

#add_definitions( -DCOMPLEX=std::complex<double> )
#add_subdirectory(custom_external_libraries/SparseLib++/1.7)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/custom_cmake_modules")

option(MULTITHREADED_SOLVERS_APPLICATION_ENABLE_SUPERLU_MT "Enable SuperLU_MT for KratosMultithreadedSolversApplication" OFF)
option(MULTITHREADED_SOLVERS_APPLICATION_ENABLE_ARPACK "Enable Arpack for KratosMultithreadedSolversApplication" OFF)
option(MULTITHREADED_SOLVERS_APPLICATION_ENABLE_FEAST "Enable FEAST for KratosMultithreadedSolversApplication" OFF)
option(MULTITHREADED_SOLVERS_APPLICATION_ENABLE_HSL "Enable HSL for KratosMultithreadedSolversApplication" OFF)
option(MULTITHREADED_SOLVERS_APPLICATION_ENABLE_CUDA "Enable CUDA support for KratosMultithreadedSolversApplication" OFF)

if("Fortran" IN_LIST ENABLED_LANGUAGES)
    set(MULTITHREADED_SOLVERS_APPLICATION_ENABLE_SUPERLU_MT ON)
    set(MULTITHREADED_SOLVERS_APPLICATION_ENABLE_ARPACK ON)
    set(MULTITHREADED_SOLVERS_APPLICATION_ENABLE_FEAST ON)
    set(MULTITHREADED_SOLVERS_APPLICATION_ENABLE_HSL ON)
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APP_USE_FORTRAN")
endif()

if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_SUPERLU_MT} MATCHES ON)
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APPLICATION_USE_SUPERLU_MT")
    set(MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS "${MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS};${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/SuperLU_MT_2.2")
    add_subdirectory(custom_external_libraries/SuperLU_MT_2.2)
endif()

if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_ARPACK} MATCHES ON)
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APP_USE_ARPACK")
    set(MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS "${MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS};${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/arpack++/include")
    add_subdirectory(custom_external_libraries/ARPACK)
    #REMARKS: if compiler complains about DefineParameters, just put this-> before it
endif()

if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_FEAST} MATCHES ON)
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APP_USE_FEAST")
    set(MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS "${MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS};${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/FEAST/2.1/include")
    add_subdirectory(custom_external_libraries/FEAST/2.1)
endif()

if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_HSL} MATCHES ON)
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APP_USE_HSL")
    set(MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS "${MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS};${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/HSL")
    add_subdirectory(custom_external_libraries/HSL)
endif()

if(UMFPACK_DIR)
    message("UMFPACK_DIR: " "${UMFPACK_DIR}")
    find_package(UMFPACK REQUIRED)
    message("UMFPACK_INCLUDE_DIRS: " "${UMFPACK_INCLUDE_DIRS}")
    message("UMFPACK_LIBRARIES: " "${UMFPACK_LIBRARIES}")
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APPLICATION_USE_UMFPACK")
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APPLICATION_USE_AMD")
    set(MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS "${MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS};${UMFPACK_INCLUDE_DIRS}")
endif()

if(DEFINED MULTITHREADED_SOLVERS_APP_METIS_DIR)
    set(MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS "${MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS};${MULTITHREADED_SOLVERS_APP_METIS_DIR}/include")
    find_library(METIS_LIB_FOR_MULTITHREADED_SOLVERS_APP metis "${MULTITHREADED_SOLVERS_APP_METIS_DIR}/lib" NO_DEFAULT_PATH)
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APPLICATION_USE_METIS")
    message("METIS_LIB_FOR_MULTITHREADED_SOLVERS_APP: " "${METIS_LIB_FOR_MULTITHREADED_SOLVERS_APP}")
endif()

#find_library(UMFPACK_LIB NAMES umfpack PATHS /usr/local/lib)
#find_library(AMD_LIB NAMES amd PATHS /usr/local/lib)
#find_library(CHOLMOD_LIB NAMES cholmod PATHS /usr/local/lib)
#find_library(COLAMD_LIB NAMES colamd PATHS /usr/local/lib)
#find_library(BLAS_LIB NAMES blas PATHS /usr/local/lib)
##find_library(BOOST_REGEX_LIB NAMES boost_regex PATHS ${BOOST_ROOT}/lib)
##find_library(BOOST_TIMER_LIB NAMES boost_timer PATHS ${BOOST_ROOT}/lib)
##find_library(BOOST_SYSTEM_LIB NAMES boost_system PATHS ${BOOST_ROOT}/lib)
##find_library(BOOST_RANDOM_LIB NAMES boost_random PATHS ${BOOST_ROOT}/lib)

if(DEFINED PARDISO_LIBRARY)
    message("MultithreadedSolversApplication Pardiso solver is activated")
    message("PARDISO_LIBRARY: " "${PARDISO_LIBRARY}")
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APPLICATION_USE_PARDISO")
endif()

if(${USE_INTEL_GREATER_THAN_13} MATCHES TRUE)
    message("***************************************************************************")
    message("****** kratos configured for using the mkl shipped with intel >= 2013 *****")
    message("***************************************************************************")
    find_package(MKLSOLVER13 REQUIRED)
elseif(${USE_INTEL_GREATER_THAN_12} MATCHES TRUE)
    message("***************************************************************************")
    message("****** kratos configured for using the mkl shipped with intel >= 2012 *****")
    message("****** set USE_INTEL_GREATER_THAN_13 to TRUE to use a more modern version *")
    message("***************************************************************************")
    find_package(MKLSOLVER12 REQUIRED)
elseif(${USE_INTEL_GREATER_THAN_15} MATCHES TRUE)
    message("***************************************************************************")
    message("****** kratos configured for using the mkl shipped with intel >= 2015 *****")
    message("****** set USE_INTEL_GREATER_THAN_13 to TRUE to use a more modern version *")
    message("***************************************************************************")
    find_package(MKLSOLVER15 REQUIRED)
elseif(${USE_INTEL_GREATER_THAN_17} MATCHES TRUE)
    message("***************************************************************************")
    message("****** kratos configured for using the mkl shipped with intel >= 2017 *****")
    message("****** set USE_INTEL_GREATER_THAN_13 to TRUE to use a more modern version *")
    message("***************************************************************************")
    find_package(MKLSOLVER17 REQUIRED)
elseif(${USE_INTEL_GREATER_THAN_24} MATCHES TRUE)
    message("***************************************************************************")
    message("****** kratos configured for using the mkl shipped with intel >= 2017 *****")
    message("****** set USE_INTEL_GREATER_THAN_13 to TRUE to use a more modern version *")
    message("***************************************************************************")
    find_package(MKLSOLVER24 REQUIRED)
elseif(${USE_INTEL_MIC} MATCHES TRUE)
    message("***************************************************************************")
    message("****** kratos configured for using the mkl for Intel Xeon Phi         *****")
    message("***************************************************************************")
    find_package(MKLSOLVERmic REQUIRED)
else()
    message("***************************************************************************")
    message("****** kratos configured for using the mkl shipped with intel < 2012*******")
    message("****** set USE_INTEL_GREATER_THAN_13 to TRUE to use a more modern version *")
    message("***************************************************************************")
    find_package(MKLSOLVER REQUIRED)
endif()

if (${MKLSOLVER_FOUND} MATCHES "YES")
    set(MULTITHREADED_SOLVERS_APP_USE_MKL TRUE)
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APP_USE_MKL")
endif()

########ADD SPECTRA LIBRARY########
find_package(Eigen)
if(${SPECTRA_FOUND} MATCHES TRUE)
    message("Eigen is found at " ${EIGEN_DIR})
endif()

find_package(Spectra)
if(${SPECTRA_FOUND} MATCHES TRUE)
    message("Spectra is found at " ${SPECTRA_DIR})
    set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APP_USE_SPECTRA")
ELSE()
    message("Spetra is not found. The eigenvalues solver is not available.")
endif()
#####################

######## Find and add cuDSS
if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_CUDA} MATCHES ON)
    find_package(cudss) # COMPONENTS cudss)
    if (cudss_cudss_FOUND EQUAL 1)
        if (WIN32)
            set(MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS "${MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS};${cudss_INCLUDE_DIR}")
        endif()
        set(MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS "${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS};MULTITHREADED_SOLVERS_APP_USE_CUDSS")

        find_package(CUDAToolkit REQUIRED)
        set(MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS "${MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS};${CUDAToolkit_INCLUDE_DIRS}")
    endif()
endif()
#####################

###############################################################

## adding sources
set( KRATOS_MULTITHREADED_SOLVERS_APPLICATION_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/multithreaded_solvers_application.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/external_includes/r8lib.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/external_includes/condition.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/mesh_rcm.cpp
)

if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_FEAST} MATCHES ON)
    set( KRATOS_MULTITHREADED_SOLVERS_APPLICATION_SOURCES
        ${KRATOS_MULTITHREADED_SOLVERS_APPLICATION_SOURCES}
        ${CMAKE_CURRENT_SOURCE_DIR}/custom_eigen_solvers/feast_solver.cpp
    )
endif()

if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_ARPACK} MATCHES ON)
    set( KRATOS_MULTITHREADED_SOLVERS_APPLICATION_SOURCES
        ${KRATOS_MULTITHREADED_SOLVERS_APPLICATION_SOURCES}
        ${CMAKE_CURRENT_SOURCE_DIR}/custom_eigen_solvers/arpack_solver.cpp
    )
endif()

set( KRATOS_MULTITHREADED_SOLVERS_APPLICATION_SOURCES
    ${KRATOS_MULTITHREADED_SOLVERS_APPLICATION_SOURCES}
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_eigen_solvers_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_linear_solvers_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_cuda_solvers_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_preconditioners_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_utilities_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_processes_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/multithreaded_solvers_python_application.cpp
)

if("Fortran" IN_LIST ENABLED_LANGUAGES)
    set( KRATOS_MULTITHREADED_SOLVERS_APPLICATION_SOURCES
        ${KRATOS_MULTITHREADED_SOLVERS_APPLICATION_SOURCES}
        ${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/tools.f
    )
endif()

###############################################################
## define library Kratos which defines the basic python interface
add_library(KratosMultithreadedSolversApplication SHARED ${KRATOS_MULTITHREADED_SOLVERS_APPLICATION_SOURCES})

add_library(KratosMultithreadedSolversApplicationDependencies INTERFACE)
if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_SUPERLU_MT} MATCHES ON)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE superlu_mt)
endif()
target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE ${UMFPACK_LIBRARIES})
# target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE rt)
target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE ${METIS_LIB_FOR_MULTITHREADED_SOLVERS_APP})
if(DEFINED PARDISO_LIBRARY)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE ${PARDISO_LIBRARY})
endif()

if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_ARPACK} MATCHES ON)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE arpack)
endif()

if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_HSL} MATCHES ON)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE hsl)
endif()

if(${MULTITHREADED_SOLVERS_APPLICATION_ENABLE_FEAST} MATCHES ON)
    # REMARKS: Feast uses various subroutines of MKL, so we have to link manually here
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE feast_sparse)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE feast)
    # TODO the libraries below depends on the MKL version. One must customize that according to the MKL library
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE mkl_intel_lp64)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE mkl_intel_thread)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE mkl_core)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE imf)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE svml)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE irc)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE iomp5)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE pthread)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE m)
endif()

target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE ${BLAS_LIBRARIES})
target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE ${LAPACK_LIBRARIES})
if (${MKLSOLVER_FOUND} MATCHES "YES")
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE ${MKLSOLVER_LIBRARIES})
endif()
if (cudss_cudss_FOUND EQUAL 1)
    target_link_directories(KratosMultithreadedSolversApplicationDependencies INTERFACE ${cudss_LIBRARY_DIR} ${CUBLAS_LIB_PATH})
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE cudss)
    target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE CUDA::cudart)
endif()
# target_link_libraries(KratosMultithreadedSolversApplicationDependencies INTERFACE gfortran) # TODO check if we need to enable

target_link_libraries(KratosMultithreadedSolversApplication PRIVATE KratosCore)
target_link_libraries(KratosMultithreadedSolversApplication PUBLIC KratosMultithreadedSolversApplicationDependencies)

target_include_directories(KratosMultithreadedSolversApplication PUBLIC ${MULTITHREADED_SOLVERS_APPLICATION_INCLUDE_DIRS})
target_include_directories(KratosMultithreadedSolversApplication PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_compile_definitions(KratosMultithreadedSolversApplication PRIVATE KRATOS_CORE=IMPORT MULTITHREADED_SOLVERS_APPLICATION=EXPORT)
target_compile_definitions(KratosMultithreadedSolversApplication PUBLIC ${MULTITHREADED_SOLVERS_APPLICATION_COMPILE_DEFS})

set_target_properties(KratosMultithreadedSolversApplication PROPERTIES PREFIX "")
install(TARGETS KratosMultithreadedSolversApplication DESTINATION libs )
if(DEFINED PARDISO_LIBRARY)
    install(FILES ${PARDISO_LIBRARY} DESTINATION libs )
endif()

# get_property(inc_dirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES)
# message("TestApplication subdir inc_dirs = ${inc_dirs}")

# changing the .dll suffix to .pyd
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set_target_properties(KratosMultithreadedSolversApplication PROPERTIES SUFFIX .pyd)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

if(${INSTALL_PYTHON_FILES} MATCHES ON)
  get_filename_component (CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/python_scripts DESTINATION applications/${CURRENT_DIR_NAME}  FILES_MATCHING PATTERN "*.py"  PATTERN ".svn" EXCLUDE)
endif(${INSTALL_PYTHON_FILES} MATCHES ON)

# get_property(inc_dirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES)
# message("TestApplication subdir inc_dirs = ${inc_dirs}")

# Add to the KratosMultiphisics Python module
install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/MultithreadedSolversApplication.py" DESTINATION KratosMultiphysics )
